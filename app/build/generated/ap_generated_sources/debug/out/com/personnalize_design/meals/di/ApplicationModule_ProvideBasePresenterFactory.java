// Generated by Dagger (https://dagger.dev).
package com.personnalize_design.meals.di;

import com.personnalize_design.meals.data.DataManager;
import com.personnalize_design.meals.ui.base.MvpPresenter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideBasePresenterFactory implements Factory<MvpPresenter> {
  private final ApplicationModule module;

  private final Provider<DataManager> dataManagerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  public ApplicationModule_ProvideBasePresenterFactory(ApplicationModule module,
      Provider<DataManager> dataManagerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    this.module = module;
    this.dataManagerProvider = dataManagerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
  }

  @Override
  public MvpPresenter get() {
    return provideBasePresenter(module, dataManagerProvider.get(), compositeDisposableProvider.get());
  }

  public static ApplicationModule_ProvideBasePresenterFactory create(ApplicationModule module,
      Provider<DataManager> dataManagerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    return new ApplicationModule_ProvideBasePresenterFactory(module, dataManagerProvider, compositeDisposableProvider);
  }

  public static MvpPresenter provideBasePresenter(ApplicationModule instance,
      DataManager dataManager, CompositeDisposable compositeDisposable) {
    return Preconditions.checkNotNull(instance.provideBasePresenter(dataManager, compositeDisposable), "Cannot return null from a non-@Nullable @Provides method");
  }
}
