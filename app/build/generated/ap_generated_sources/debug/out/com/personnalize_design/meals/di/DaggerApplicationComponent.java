// Generated by Dagger (https://dagger.dev).
package com.personnalize_design.meals.di;

import android.content.Context;
import com.personnalize_design.meals.data.DataManager;
import com.personnalize_design.meals.data.db.DbHelper;
import com.personnalize_design.meals.data.db.MealsDatabase;
import com.personnalize_design.meals.data.preferences.PreferenceHelper;
import com.personnalize_design.meals.ui.base.BaseActivity;
import com.personnalize_design.meals.ui.base.BaseActivity_MembersInjector;
import com.personnalize_design.meals.ui.day_menu.DayMenuFragment;
import com.personnalize_design.meals.ui.day_menu.DayMenuFragment_MembersInjector;
import com.personnalize_design.meals.ui.day_menu.MainScreenActivity;
import com.personnalize_design.meals.ui.day_menu.MainScreenActivity_MembersInjector;
import com.personnalize_design.meals.ui.day_menu.NoFactoryErrorFragment;
import com.personnalize_design.meals.ui.day_menu.NoFactoryErrorFragment_MembersInjector;
import com.personnalize_design.meals.ui.day_menu.presenter.DayMenuPresenter;
import com.personnalize_design.meals.ui.day_menu.presenter.MainScreenPresenter;
import com.personnalize_design.meals.ui.day_menu.presenter.NoFactoryErrorPresenter;
import com.personnalize_design.meals.ui.error.ErrorFragment;
import com.personnalize_design.meals.ui.error.ErrorFragment_MembersInjector;
import com.personnalize_design.meals.ui.error.presenter.ErrorFragmentPresenter;
import com.personnalize_design.meals.ui.main.MainActivity;
import com.personnalize_design.meals.ui.main.MainActivity_MembersInjector;
import com.personnalize_design.meals.ui.main.presenter.MainActivityPresenter;
import com.personnalize_design.meals.ui.meal_addition.AccompagnementScreen;
import com.personnalize_design.meals.ui.meal_addition.AccompagnementScreen_MembersInjector;
import com.personnalize_design.meals.ui.meal_addition.presenter.AccompagnementScreenPresenter;
import com.personnalize_design.meals.ui.menu_quantity.MenuQuantityActivity;
import com.personnalize_design.meals.ui.menu_quantity.MenuQuantityActivity_MembersInjector;
import com.personnalize_design.meals.ui.menu_quantity.presenter.MenuQuantityPresenter;
import com.personnalize_design.meals.ui.search.SearchCompany;
import com.personnalize_design.meals.ui.search.SearchCompany_MembersInjector;
import com.personnalize_design.meals.ui.search.SearchFragment;
import com.personnalize_design.meals.ui.search.SearchFragment_MembersInjector;
import com.personnalize_design.meals.ui.search.presenter.SearchCompanyPresenter;
import com.personnalize_design.meals.ui.search.presenter.SearchFragmentPresenter;
import com.personnalize_design.meals.ui.user_order.NoOrderFragment;
import com.personnalize_design.meals.ui.user_order.NoOrderFragment_MembersInjector;
import com.personnalize_design.meals.ui.user_order.UserOrderFragment;
import com.personnalize_design.meals.ui.user_order.UserOrderFragment_MembersInjector;
import com.personnalize_design.meals.ui.user_order.presenter.NoOrderPresenter;
import com.personnalize_design.meals.ui.user_order.presenter.UserOrderPresenter;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private final ApplicationModule applicationModule;

  private Provider<Context> provideContextProvider;

  private Provider<MealsDatabase> provideRoomDatabaseProvider;

  private Provider<DbHelper> provideAppDbHelperProvider;

  private DaggerApplicationComponent(ApplicationModule applicationModuleParam) {
    this.applicationModule = applicationModuleParam;
    initialize(applicationModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private PreferenceHelper getPreferenceHelper() {
    return ApplicationModule_ProvidePreferenceFactory.providePreference(applicationModule, provideContextProvider.get());}

  private DataManager getDataManager() {
    return ApplicationModule_ProvideDataManagerFactory.provideDataManager(applicationModule, provideContextProvider.get(), ApplicationModule_ProvideApiHelperFactory.provideApiHelper(applicationModule), getPreferenceHelper(), provideAppDbHelperProvider.get());}

  private MainActivityPresenter<MainActivity> getMainActivityPresenterOfMainActivity() {
    return new MainActivityPresenter<MainActivity>(getDataManager(), ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));}

  private MainScreenPresenter<MainScreenActivity> getMainScreenPresenterOfMainScreenActivity() {
    return new MainScreenPresenter<MainScreenActivity>(getDataManager(), ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));}

  private DayMenuPresenter<DayMenuFragment> getDayMenuPresenterOfDayMenuFragment() {
    return new DayMenuPresenter<DayMenuFragment>(getDataManager(), ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));}

  private NoFactoryErrorPresenter<NoFactoryErrorFragment> getNoFactoryErrorPresenterOfNoFactoryErrorFragment(
      ) {
    return new NoFactoryErrorPresenter<NoFactoryErrorFragment>(getDataManager(), ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));}

  private AccompagnementScreenPresenter<AccompagnementScreen> getAccompagnementScreenPresenterOfAccompagnementScreen(
      ) {
    return new AccompagnementScreenPresenter<AccompagnementScreen>(getDataManager(), ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));}

  private MenuQuantityPresenter<MenuQuantityActivity> getMenuQuantityPresenterOfMenuQuantityActivity(
      ) {
    return new MenuQuantityPresenter<MenuQuantityActivity>(getDataManager(), ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));}

  private UserOrderPresenter<UserOrderFragment> getUserOrderPresenterOfUserOrderFragment() {
    return new UserOrderPresenter<UserOrderFragment>(getDataManager(), ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));}

  private ErrorFragmentPresenter<ErrorFragment> getErrorFragmentPresenterOfErrorFragment() {
    return new ErrorFragmentPresenter<ErrorFragment>(getDataManager(), ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));}

  private NoOrderPresenter<NoOrderFragment> getNoOrderPresenterOfNoOrderFragment() {
    return new NoOrderPresenter<NoOrderFragment>(getDataManager(), ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));}

  private SearchFragmentPresenter<SearchFragment> getSearchFragmentPresenterOfSearchFragment() {
    return new SearchFragmentPresenter<SearchFragment>(getDataManager(), ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));}

  private SearchCompanyPresenter<SearchCompany> getSearchCompanyPresenterOfSearchCompany() {
    return new SearchCompanyPresenter<SearchCompany>(getDataManager(), ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));}

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationModule applicationModuleParam) {
    this.provideContextProvider = DoubleCheck.provider(ApplicationModule_ProvideContextFactory.create(applicationModuleParam));
    this.provideRoomDatabaseProvider = DoubleCheck.provider(ApplicationModule_ProvideRoomDatabaseFactory.create(applicationModuleParam, provideContextProvider));
    this.provideAppDbHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideAppDbHelperFactory.create(applicationModuleParam, provideRoomDatabaseProvider));
  }

  @Override
  public void inject(BaseActivity baseActivity) {
    injectBaseActivity(baseActivity);}

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);}

  @Override
  public void inject(MainScreenActivity mainScreenActivity) {
    injectMainScreenActivity(mainScreenActivity);}

  @Override
  public void inject(DayMenuFragment dayMenuFragment) {
    injectDayMenuFragment(dayMenuFragment);}

  @Override
  public void inject(NoFactoryErrorFragment noFactoryErrorFragment) {
    injectNoFactoryErrorFragment(noFactoryErrorFragment);}

  @Override
  public void inject(AccompagnementScreen accompagnementScreen) {
    injectAccompagnementScreen(accompagnementScreen);}

  @Override
  public void inject(MenuQuantityActivity menuQuantityActivity) {
    injectMenuQuantityActivity(menuQuantityActivity);}

  @Override
  public void inject(UserOrderFragment userOrderFragment) {
    injectUserOrderFragment(userOrderFragment);}

  @Override
  public void inject(ErrorFragment errorFragment) {
    injectErrorFragment(errorFragment);}

  @Override
  public void inject(NoOrderFragment noOrderFragment) {
    injectNoOrderFragment(noOrderFragment);}

  @Override
  public void injext(SearchFragment searchFragment) {
    injectSearchFragment(searchFragment);}

  @Override
  public void inject(SearchCompany searchCompany) {
    injectSearchCompany(searchCompany);}

  private BaseActivity injectBaseActivity(BaseActivity instance) {
    BaseActivity_MembersInjector.injectContext(instance, provideContextProvider.get());
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    BaseActivity_MembersInjector.injectContext(instance, provideContextProvider.get());
    MainActivity_MembersInjector.injectMPresenter(instance, getMainActivityPresenterOfMainActivity());
    return instance;
  }

  private MainScreenActivity injectMainScreenActivity(MainScreenActivity instance) {
    BaseActivity_MembersInjector.injectContext(instance, provideContextProvider.get());
    MainScreenActivity_MembersInjector.injectMPresenter(instance, getMainScreenPresenterOfMainScreenActivity());
    return instance;
  }

  private DayMenuFragment injectDayMenuFragment(DayMenuFragment instance) {
    DayMenuFragment_MembersInjector.injectMPresenter(instance, getDayMenuPresenterOfDayMenuFragment());
    return instance;
  }

  private NoFactoryErrorFragment injectNoFactoryErrorFragment(NoFactoryErrorFragment instance) {
    NoFactoryErrorFragment_MembersInjector.injectMPresenter(instance, getNoFactoryErrorPresenterOfNoFactoryErrorFragment());
    return instance;
  }

  private AccompagnementScreen injectAccompagnementScreen(AccompagnementScreen instance) {
    BaseActivity_MembersInjector.injectContext(instance, provideContextProvider.get());
    AccompagnementScreen_MembersInjector.injectMPresenter(instance, getAccompagnementScreenPresenterOfAccompagnementScreen());
    return instance;
  }

  private MenuQuantityActivity injectMenuQuantityActivity(MenuQuantityActivity instance) {
    BaseActivity_MembersInjector.injectContext(instance, provideContextProvider.get());
    MenuQuantityActivity_MembersInjector.injectMPresenter(instance, getMenuQuantityPresenterOfMenuQuantityActivity());
    return instance;
  }

  private UserOrderFragment injectUserOrderFragment(UserOrderFragment instance) {
    UserOrderFragment_MembersInjector.injectMPresenter(instance, getUserOrderPresenterOfUserOrderFragment());
    return instance;
  }

  private ErrorFragment injectErrorFragment(ErrorFragment instance) {
    ErrorFragment_MembersInjector.injectMPresenter(instance, getErrorFragmentPresenterOfErrorFragment());
    return instance;
  }

  private NoOrderFragment injectNoOrderFragment(NoOrderFragment instance) {
    NoOrderFragment_MembersInjector.injectMPresenter(instance, getNoOrderPresenterOfNoOrderFragment());
    return instance;
  }

  private SearchFragment injectSearchFragment(SearchFragment instance) {
    SearchFragment_MembersInjector.injectMPresenter(instance, getSearchFragmentPresenterOfSearchFragment());
    return instance;
  }

  private SearchCompany injectSearchCompany(SearchCompany instance) {
    BaseActivity_MembersInjector.injectContext(instance, provideContextProvider.get());
    SearchCompany_MembersInjector.injectMPresenter(instance, getSearchCompanyPresenterOfSearchCompany());
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      return new DaggerApplicationComponent(applicationModule);
    }
  }
}
