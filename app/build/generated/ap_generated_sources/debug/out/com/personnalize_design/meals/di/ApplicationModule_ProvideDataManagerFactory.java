// Generated by Dagger (https://dagger.dev).
package com.personnalize_design.meals.di;

import android.content.Context;
import com.personnalize_design.meals.data.DataManager;
import com.personnalize_design.meals.data.db.DbHelper;
import com.personnalize_design.meals.data.network.ApiHelper;
import com.personnalize_design.meals.data.preferences.PreferenceHelper;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideDataManagerFactory implements Factory<DataManager> {
  private final ApplicationModule module;

  private final Provider<Context> contextProvider;

  private final Provider<ApiHelper> apiHelperProvider;

  private final Provider<PreferenceHelper> preferenceHelperProvider;

  private final Provider<DbHelper> dbHelperProvider;

  public ApplicationModule_ProvideDataManagerFactory(ApplicationModule module,
      Provider<Context> contextProvider, Provider<ApiHelper> apiHelperProvider,
      Provider<PreferenceHelper> preferenceHelperProvider, Provider<DbHelper> dbHelperProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.apiHelperProvider = apiHelperProvider;
    this.preferenceHelperProvider = preferenceHelperProvider;
    this.dbHelperProvider = dbHelperProvider;
  }

  @Override
  public DataManager get() {
    return provideDataManager(module, contextProvider.get(), apiHelperProvider.get(), preferenceHelperProvider.get(), dbHelperProvider.get());
  }

  public static ApplicationModule_ProvideDataManagerFactory create(ApplicationModule module,
      Provider<Context> contextProvider, Provider<ApiHelper> apiHelperProvider,
      Provider<PreferenceHelper> preferenceHelperProvider, Provider<DbHelper> dbHelperProvider) {
    return new ApplicationModule_ProvideDataManagerFactory(module, contextProvider, apiHelperProvider, preferenceHelperProvider, dbHelperProvider);
  }

  public static DataManager provideDataManager(ApplicationModule instance, Context context,
      ApiHelper apiHelper, PreferenceHelper preferenceHelper, DbHelper dbHelper) {
    return Preconditions.checkNotNull(instance.provideDataManager(context, apiHelper, preferenceHelper, dbHelper), "Cannot return null from a non-@Nullable @Provides method");
  }
}
