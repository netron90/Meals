// Generated by Dagger (https://dagger.dev).
package com.personnalize_design.meals.di;

import android.content.Context;
import com.personnalize_design.meals.data.DataManager;
import com.personnalize_design.meals.data.db.DbHelper;
import com.personnalize_design.meals.data.db.MealsDatabase;
import com.personnalize_design.meals.data.preferences.PreferenceHelper;
import com.personnalize_design.meals.services.CheckMealBillTimeService;
import com.personnalize_design.meals.services.CheckMealBillTimeService_MembersInjector;
import com.personnalize_design.meals.services.CheckSuggestionTime;
import com.personnalize_design.meals.services.CheckSuggestionTime_MembersInjector;
import com.personnalize_design.meals.services.DeleteBillService;
import com.personnalize_design.meals.services.DeleteBillService_MembersInjector;
import com.personnalize_design.meals.services.NotifyUserService;
import com.personnalize_design.meals.services.NotifyUserService_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerServiceComponent implements ServiceComponent {
  private final ApplicationModule applicationModule;

  private Provider<Context> provideContextProvider;

  private Provider<MealsDatabase> provideRoomDatabaseProvider;

  private Provider<DbHelper> provideAppDbHelperProvider;

  private DaggerServiceComponent(ApplicationModule applicationModuleParam) {
    this.applicationModule = applicationModuleParam;
    initialize(applicationModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private PreferenceHelper getPreferenceHelper() {
    return ApplicationModule_ProvidePreferenceFactory.providePreference(applicationModule, provideContextProvider.get());}

  private DataManager getDataManager() {
    return ApplicationModule_ProvideDataManagerFactory.provideDataManager(applicationModule, provideContextProvider.get(), ApplicationModule_ProvideApiHelperFactory.provideApiHelper(applicationModule), getPreferenceHelper(), provideAppDbHelperProvider.get());}

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationModule applicationModuleParam) {
    this.provideContextProvider = DoubleCheck.provider(ApplicationModule_ProvideContextFactory.create(applicationModuleParam));
    this.provideRoomDatabaseProvider = DoubleCheck.provider(ApplicationModule_ProvideRoomDatabaseFactory.create(applicationModuleParam, provideContextProvider));
    this.provideAppDbHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideAppDbHelperFactory.create(applicationModuleParam, provideRoomDatabaseProvider));
  }

  @Override
  public void inject(CheckMealBillTimeService checkMealBillTimeService) {
    injectCheckMealBillTimeService(checkMealBillTimeService);}

  @Override
  public void inject(DeleteBillService deleteBillService) {
    injectDeleteBillService(deleteBillService);}

  @Override
  public void inject(NotifyUserService notifyUserService) {
    injectNotifyUserService(notifyUserService);}

  @Override
  public void inject(CheckSuggestionTime suggestionTime) {
    injectCheckSuggestionTime(suggestionTime);}

  private CheckMealBillTimeService injectCheckMealBillTimeService(
      CheckMealBillTimeService instance) {
    CheckMealBillTimeService_MembersInjector.injectMDataManager(instance, getDataManager());
    return instance;
  }

  private DeleteBillService injectDeleteBillService(DeleteBillService instance) {
    DeleteBillService_MembersInjector.injectMDataManager(instance, getDataManager());
    return instance;
  }

  private NotifyUserService injectNotifyUserService(NotifyUserService instance) {
    NotifyUserService_MembersInjector.injectMDataManager(instance, getDataManager());
    return instance;
  }

  private CheckSuggestionTime injectCheckSuggestionTime(CheckSuggestionTime instance) {
    CheckSuggestionTime_MembersInjector.injectMDataManager(instance, getDataManager());
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public ServiceComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      return new DaggerServiceComponent(applicationModule);
    }
  }
}
