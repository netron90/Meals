// Generated by Dagger (https://dagger.dev).
package com.personnalize_design.meals.ui.day_menu.presenter;

import com.personnalize_design.meals.data.DataManager;
import com.personnalize_design.meals.ui.day_menu.interfaces.NoFactoryErrorMvpView;
import dagger.internal.Factory;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NoFactoryErrorPresenter_Factory<V extends NoFactoryErrorMvpView> implements Factory<NoFactoryErrorPresenter<V>> {
  private final Provider<DataManager> dataManagerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  public NoFactoryErrorPresenter_Factory(Provider<DataManager> dataManagerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    this.dataManagerProvider = dataManagerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
  }

  @Override
  public NoFactoryErrorPresenter<V> get() {
    return new NoFactoryErrorPresenter<V>(dataManagerProvider.get(), compositeDisposableProvider.get());
  }

  public static <V extends NoFactoryErrorMvpView> NoFactoryErrorPresenter_Factory<V> create(
      Provider<DataManager> dataManagerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    return new NoFactoryErrorPresenter_Factory<V>(dataManagerProvider, compositeDisposableProvider);
  }

  public static <V extends NoFactoryErrorMvpView> NoFactoryErrorPresenter<V> newInstance(
      DataManager dataManager, CompositeDisposable compositeDisposable) {
    return new NoFactoryErrorPresenter<V>(dataManager, compositeDisposable);
  }
}
